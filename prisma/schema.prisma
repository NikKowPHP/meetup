generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  name               String?
  supabaseAuthId     String              @unique @map("supabase_auth_id")
  stripeCustomerId   String?             @unique @map("stripe_customer_id")
  subscriptionTier   String              @default("FREE") // FREE, PRO
  role               Role                @default(USER)
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  
  organizedEvents    Event[]             @relation("EventOrganizer")
  eventsAttending    UserAttendingEvent[]
  eventClaimRequests EventClaimRequest[]
  pushSubscriptions  PushSubscription[]
}

model Event {
  id              String      @id @default(cuid())
  title           String
  description     String      @db.Text
  startTime       DateTime    @map("start_time")
  endTime         DateTime?   @map("end_time")
  venueName       String?     @map("venue_name")
  address         String?
  latitude        Float?
  longitude       Float?
  sourceUrl       String      @map("source_url")
  imageUrl        String?     @map("image_url")
  isFree          Boolean     @default(true) @map("is_free")
  isFeatured      Boolean     @default(false) @map("is_featured")
  status          String      @default("DRAFT") // DRAFT, PUBLISHED, FLAGGED
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  organizerId     String?     @map("organizer_id")
  organizer       User?       @relation("EventOrganizer", fields: [organizerId], references: [id])
  
  categoryId      String?
  category        Category?   @relation(fields: [categoryId], references: [id])
  
  attendees       UserAttendingEvent[]
  promotions      Promotion[]
  claimRequests   EventClaimRequest[]

  @@index([startTime, status])
}

model Category {
  id     String  @id @default(cuid())
  name   String  @unique
  events Event[]
}

model UserAttendingEvent {
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, eventId])
}

model EventClaimRequest {
  id                String   @id @default(cuid())
  status            String   @default("PENDING") // PENDING, APPROVED, REJECTED
  verificationToken String?  @unique @map("verification_token")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId           String
  event             Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  @@unique([userId, eventId])
}

model Promotion {
  id             String    @id @default(cuid())
  eventId        String
  event          Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  stripeChargeId String    @unique @map("stripe_charge_id")
  promotionTier  String    @map("promotion_tier")
  expiresAt      DateTime  @map("expires_at")
  createdAt      DateTime  @default(now()) @map("created_at")
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  endpoint  String   @unique
  keys      Json
  keywords  String[] @default([])
  createdAt DateTime @default(now()) @map("created_at")
}
